class Solution {
    public int makeConnected(int n, int[][] connections) {
        DSU d = new DSU(n);
        int redundant = 0;
        for(int[] con: connections){
            int c1 = con[0];
            int c2 = con[1];
            if(d.connected(c1, c2)) redundant++;
            else d.union(c1,c2);
        }
        // System.out.println(redundant);
        // System.out.println(d.cnt);
        return (redundant - (d.cnt-1) >=0? d.cnt-1: -1);
    }
    private class DSU{
        private int[] parents;
        private int cnt ;
        public DSU(int n){
            parents = new int[n];
            cnt = n;
            for(int i = 0; i < n; i++){
                parents[i] = i;
            }
        }
        private void union(int i, int j){
            int p1 = find(i);
            int p2 = find(j);
            if(p1!=p2) {
                parents[p1] = p2;
                cnt--;
            }
        }
        private int find(int i){
            while(i != parents[i]){
                i = parents[i];
            }
            return i;
        }
        private boolean connected(int i, int j){
            return find(i) == find(j);
        }
    }
}